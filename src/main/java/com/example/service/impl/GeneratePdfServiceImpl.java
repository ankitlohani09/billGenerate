package com.example.service.impl;

import com.example.entity.Quotation;
import com.example.repository.QuotationRepository;
import com.example.service.GeneratePdfService;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.util.Optional;

@Service
public class GeneratePdfServiceImpl implements GeneratePdfService {

    @Autowired
    private QuotationRepository quotationRepository;

    public byte[] generatePdfForQuotation(Long quotationId) throws DocumentException {
        Optional<Quotation> quotationOptional = quotationRepository.findById(quotationId);
        Quotation quotation = new Quotation();

        if (quotationOptional.isPresent()) {
            quotation = quotationOptional.get();
        }

        // PDF Setup
        Document document = new Document();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PdfWriter.getInstance(document, outputStream);
        document.open();

        // Custom Fonts
        Font titleFont = new Font(Font.FontFamily.HELVETICA, 20, Font.BOLD, BaseColor.BLUE);
        Font headerFont = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD, BaseColor.BLACK);
        Font boldFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD, BaseColor.BLACK);
        Font normalFont = new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL, BaseColor.BLACK);

        // Add Logo
        addImage(document, "C:/Users/aloha/Downloads/billGenerateProject/src/main/resources/static/image/LogoImg.png", 150, 80, Element.ALIGN_RIGHT);

        // Title Section
        addParagraph(document, "RADHIKA ENTERPRISES", titleFont, Element.ALIGN_CENTER, 10);
        addParagraph(document, "HEADING TOWARDS HEALTHIER EARTH", normalFont, Element.ALIGN_CENTER, 20);

        // Add Hotel Image
        addImage(document, "C:/Users/aloha/Downloads/billGenerateProject/src/main/resources/static/image/HotelImg.png", 350, 200, Element.ALIGN_CENTER);

        // Contact Information
        addParagraph(document, "E-Mail: salesaps2017@gmail.com | Contact: 8817175272, 6262614137\n" +
                        "Address: APS Near Radhika Hotel Dewas Naka Indore M.P.\nGST Registration Number: 23DVJPP4611M1ZB",
                boldFont, Element.ALIGN_LEFT, 15);

        addMultipleNewLines(document, 2);

        // Quotation Details Table
        Paragraph paragraph = new Paragraph("QUOTATION â€“ " + quotationId, headerFont);
        paragraph.setAlignment(Element.ALIGN_CENTER);
        document.add(paragraph);
        addMultipleNewLines(document, 2);
        document.add(new Paragraph("NAME: " + quotation.getName(), boldFont));
        document.add(new Paragraph("MOB NO: " + quotation.getMobileNo(), boldFont));
        document.add(new Paragraph("DATE: " + quotation.getDate(), boldFont));
        document.add(new Paragraph("ADD: " + quotation.getAddress(), boldFont));

        // Adding the detailed text in the document
        addMultipleNewLines(document, 4);
        document.add(new Paragraph("Sub: Quotation for 3 KW on grid solar system on Erection procurement and commissioning basis", normalFont));
        document.add(Chunk.NEWLINE); // New line for readability
        addParagraph(document, "Thank you for selecting APS. Our company has provided ROOF TOP SOLAR SOLUTION and has built a reputation of integrity and efficiency.", normalFont, Element.ALIGN_LEFT, 0);
        addParagraph(document, "Our team has many years of experience and we are dedicated to providing you with the most up-to-date service possible.", normalFont, Element.ALIGN_LEFT, 0);
        addParagraph(document, "We are pleased to welcome you as a new APS family member. We feel honored that you have chosen us to fulfill your solar energy requirement, your complete satisfaction is our first priority! And look forward to serving you.", normalFont, Element.ALIGN_LEFT, 0);
        addParagraph(document, "Project Description:", boldFont, Element.ALIGN_LEFT, 10); // Project Description heading
        addParagraph(document, "A grid-tied solar system is an interactive grid system where electricity generated by solar energy is used by the load and the excess energy is fed back to the grid.", normalFont, Element.ALIGN_LEFT, 0);
        addParagraph(document, "It uses a grid-tie interactive inverter that converts the direct current from the panels to alternating current to be used by the loads or transferred to the grid.", normalFont, Element.ALIGN_LEFT, 0);
        addParagraph(document, "This project will include the installation of the solar system consisting of rooftop mounting of Solar PV modules with mounting accessories, Net Meter, and MPPT solar grid-tie inverter.", normalFont, Element.ALIGN_LEFT, 0);

        addMultipleNewLines(document, 1);
        // Proposed Site Table
        PdfPTable proposedSiteTable = createTable(2);
        proposedSiteTable.setWidthPercentage(100);
        proposedSiteTable.setSpacingBefore(10f);

        // Add the header cell that spans two columns
        addColspanHeader(proposedSiteTable, "Proposed Site", boldFont);
        // Adding remaining cells with border directly
        addTableCellWithBorder(proposedSiteTable, "Name: ", boldFont);
        addTableCellWithBorder(proposedSiteTable, quotation.getProposedSiteName(), normalFont);
        addTableCellWithBorder(proposedSiteTable, "Location: ", boldFont);
        addTableCellWithBorder(proposedSiteTable, quotation.getLocation(), normalFont);
        document.add(proposedSiteTable);

        // Solar PV Specification Table
        PdfPTable solarTable = createTable(2);
        addColspanHeader(solarTable, "Solar PV System Specification: On-Grid Rooftop", boldFont);
        addTableCellWithBorder(solarTable, "Plant Capacity: ", boldFont);
        addTableCellWithBorder(solarTable, quotation.getPlantCapacity(), normalFont);
        addTableCellWithBorder(solarTable, "Module Technology: ", boldFont);
        addTableCellWithBorder(solarTable, quotation.getModuleTechnology(), normalFont);
        addTableCellWithBorder(solarTable, "Mounting Structure Technology: ", boldFont);
        addTableCellWithBorder(solarTable, quotation.getMountingStructureTechnology(), normalFont);
        addTableCellWithBorder(solarTable, "Project Scheme: ", boldFont);
        addTableCellWithBorder(solarTable, quotation.getProjectScheme(), normalFont);
        addTableCellWithBorder(solarTable, "Power Evacuation: ", boldFont);
        addTableCellWithBorder(solarTable, quotation.getPowerEvacuation(), normalFont);
        addTableCellWithBorder(solarTable, "Solar Plant Output Connection: ", boldFont);
        addTableCellWithBorder(solarTable, quotation.getSolarPlantOutputConnection(), normalFont);
        addTableCellWithBorder(solarTable, "Approx. Area: ", boldFont);
        addTableCellWithBorder(solarTable, quotation.getApproxArea(), normalFont);
        addTableCellWithBorder(solarTable, "Scheme: ", boldFont);
        addTableCellWithBorder(solarTable, quotation.getScheme(), normalFont);
        document.add(solarTable);

        // Proposal Bases Inquiry Table
        PdfPTable inquiryTable = createTable(2);
        addColspanHeader(inquiryTable, "Proposal Bases Inquiry Received", boldFont);
        addTableCellWithBorder(inquiryTable, "From: ", boldFont);
        addTableCellWithBorder(inquiryTable, quotation.getInquiryReceivedFrom(), normalFont);
        addTableCellWithBorder(inquiryTable, "Date: ", boldFont);
        addTableCellWithBorder(inquiryTable, String.valueOf(quotation.getProposalBasesInquiryReceivedDate()), normalFont);
        addTableCellWithBorder(inquiryTable, "Offer Validity: ", boldFont);
        addTableCellWithBorder(inquiryTable, quotation.getOfferValidity(), normalFont);
        document.add(inquiryTable);

        addMultipleNewLines(document, 1);

        // Technical Specifications Table
        PdfPTable technicalSpecificationsTable = createTable(6);
        addColspanHeader(technicalSpecificationsTable, "Technical Specifications and BOM FOR 03 KW SOLAR POWER PLANT:", boldFont);

        addTableCellWithBorder(technicalSpecificationsTable, "S No.", boldFont);
        addTableCellWithBorder(technicalSpecificationsTable, "Component", boldFont);
        addTableCellWithBorder(technicalSpecificationsTable, "Specification", boldFont);
        addTableCellWithBorder(technicalSpecificationsTable, "Make", boldFont);
        addTableCellWithBorder(technicalSpecificationsTable, "Z", boldFont);
        addTableCellWithBorder(technicalSpecificationsTable, "Quantity", boldFont);
        technicalSpecificationsTable.setWidthPercentage(100);

        // Add rows to the technical specifications table
        addTableCellWithBorder(technicalSpecificationsTable, "1", normalFont);  // S No.
        addTableCellWithBorder(technicalSpecificationsTable, "Solar PV Module", normalFont);  // Component
        addTableCellWithBorder(technicalSpecificationsTable, "Mono or Polycrystalline", normalFont);  // Specification
        addTableCellWithBorder(technicalSpecificationsTable, "XYZ Solar Co.", normalFont);  // Make
        addTableCellWithBorder(technicalSpecificationsTable, "Module Efficiency: 18-20%", normalFont);  // Z (optional, custom info like efficiency)
        addTableCellWithBorder(technicalSpecificationsTable, "10", normalFont);  // Quantity

        // Additional rows as per requirement
        document.add(technicalSpecificationsTable);

        addMultipleNewLines(document, 1);

        // Footer
        addParagraph(document, "Thank You for Choosing\n" +
                        "\n RADHIKA ENTERPRISES" +
                        "\nGSTIN 23APSPB8959G2ZG" +
                        "\nContact: 9993957179" +
                        "\nsanjayboriya13@gmail.com",
                boldFont, Element.ALIGN_CENTER, 20);

        document.close();
        return outputStream.toByteArray();
    }

    // Helper methods
    private void addParagraph(Document document, String text, Font font, int alignment, float spacingAfter) throws DocumentException {
        Paragraph paragraph = new Paragraph(text, font);
        paragraph.setAlignment(alignment);
        paragraph.setSpacingAfter(spacingAfter);
        document.add(paragraph);
    }

    private void addImage(Document document, String path, float width, float height, int alignment) {
        try {
            Image image = Image.getInstance(path);
            image.scaleAbsolute(width, height);
            image.setAlignment(alignment);
            document.add(image);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private PdfPTable createTable(int numColumns) {
        PdfPTable table = new PdfPTable(numColumns);
        table.setWidthPercentage(100);
        table.setPaddingTop(10);
        return table;
    }

    private void addColspanHeader(PdfPTable table, String text, Font font) {
        PdfPCell cell = new PdfPCell(new Phrase(text, font));
        cell.setColspan(table.getNumberOfColumns());
        cell.setBackgroundColor(BaseColor.LIGHT_GRAY);
        table.addCell(cell);
    }

    private void addTableCellWithBorder(PdfPTable table, String text, Font font) {
        PdfPCell cell = new PdfPCell(new Phrase(text, font));
        cell.setBorder(Rectangle.BOX);
        table.addCell(cell);
    }

    private void addMultipleNewLines(Document document, int count) throws DocumentException {
        for (int i = 0; i < count; i++) {
            document.add(new Paragraph(" "));
        }
    }
}
